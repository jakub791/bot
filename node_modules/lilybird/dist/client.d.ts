import { User } from "./factories/user.js";
import { REST } from "./http/rest.js";
import type { DebugFunction } from "#ws";
import type { UnavailableGuildStructure, UpdatePresenceStructure, ApplicationStructure, BaseClientOptions, ClientOptions } from "./typings/index.js";
export interface Client {
    readonly user: User;
    readonly guilds: Array<UnavailableGuildStructure>;
    readonly sessionId: string;
    readonly application: ApplicationStructure;
}
export declare class Client {
    #private;
    readonly rest: REST;
    constructor(res: (client: Client) => void, options: BaseClientOptions, debug?: DebugFunction);
    login(token: string): Promise<string>;
    close(): void;
    setPresence(presence: UpdatePresenceStructure): void;
    ping(): Promise<{
        ws: number;
        rest: number;
    }>;
}
export declare function createClient(options: ClientOptions): Promise<Client>;
//# sourceMappingURL=client.d.ts.map