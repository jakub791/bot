/// <reference types="bun-types" />
import type { AuditLogEvent, MFALevel, OnboardingMode } from "#enums";
import type { LocalizationGlobalApplicationCommandStructure, LocalizationGuildApplicationCommandStructure, GuildApplicationCommandPermissionsStructure, LocalizedGlobalApplicationCommandStructure, LocalizedGuildApplicationCommandStructure, ApplicationCommandPermissionsStructure, ListArchivedThreadsReturnStructure, CreateThreadFromMessageStructure, POSTApplicationCommandStructure, CreateForumMediaThreadStructure, ModifyChannelPositionStructure, WelcomeScreenChannelStructure, InteractionResponseStructure, ModifyThreadChannelStructure, CreateChannelInviteStructure, GuildWidgetSettingsStructure, ModifyGuildChannelStructure, GetChannelMessagesStructure, CreateGuildChannelStructure, OnboardingPromptStructure, FollowedChannelStructure, ModifyDMChannelStructure, GuildOnboardingStructure, PATCHCurrentApplication, ExecuteWebhookStructure, CreateMessageStructure, ThreadChannelStructure, WelcomeScreenStructure, CreateThreadStructure, ThreadMemberStructure, GuildPreviewStructure, GetGatewayBotResponse, EditWebhookStructure, EditMessageStructure, GuildMemberStructure, CreateGuildStructure, ModifyGuildStructure, VoiceRegionStructure, IntegrationStructure, GuildWidgetStructure, ApplicationStructure, StickerPackStructure, DMChannelStructure, AuditLogStructure, MessageStructure, ChannelStructure, APIRoleStructure, StickerStructure, InviteStructure, GuildStructure, EmojiStructure, UserStructure, RoleStructure, ErrorMessage, BanStructure, ImageData } from "../typings/index.js";
export declare class RestError extends Error {
    readonly code: number;
    readonly errors: ErrorMessage["errors"];
    constructor(error: ErrorMessage);
}
export declare class REST {
    #private;
    static readonly BaseURL = "https://discord.com/api/v10/";
    constructor(token?: string);
    setToken(token: string | undefined): void;
    getGateway(): Promise<{
        url: string;
    }>;
    getGatewayBot(): Promise<GetGatewayBotResponse>;
    getGlobalApplicationCommands(clientId: string): Promise<Array<LocalizedGlobalApplicationCommandStructure>>;
    getGlobalApplicationCommands(clientId: string, withLocalizations: true): Promise<Array<LocalizationGlobalApplicationCommandStructure>>;
    createGlobalApplicationCommand(clientId: string, body: POSTApplicationCommandStructure): Promise<LocalizationGlobalApplicationCommandStructure>;
    getGlobalApplicationCommand(clientId: string, commandId: string): Promise<LocalizationGlobalApplicationCommandStructure>;
    editGlobalApplicationCommand(clientId: string, commandId: string, body: Partial<POSTApplicationCommandStructure>): Promise<LocalizationGlobalApplicationCommandStructure>;
    deleteGlobalApplicationCommand(clientId: string, commandId: string): Promise<null>;
    bulkOverwriteGlobalApplicationCommand(clientId: string, body: Array<POSTApplicationCommandStructure>): Promise<Array<LocalizationGlobalApplicationCommandStructure>>;
    getGuildApplicationCommands(clientId: string): Promise<Array<LocalizedGuildApplicationCommandStructure>>;
    getGuildApplicationCommands(clientId: string, withLocalizations: true): Promise<Array<LocalizationGuildApplicationCommandStructure>>;
    createGuildApplicationCommand(clientId: string, guildId: string, body: POSTApplicationCommandStructure): Promise<LocalizationGuildApplicationCommandStructure>;
    getGuildApplicationCommand(clientId: string, guildId: string, commandId: string): Promise<LocalizationGuildApplicationCommandStructure>;
    editGuildApplicationCommand(clientId: string, guildId: string, commandId: string, body: Partial<POSTApplicationCommandStructure>): Promise<LocalizationGuildApplicationCommandStructure>;
    deleteGuildApplicationCommand(clientId: string, guildId: string, commandId: string): Promise<null>;
    bulkOverwriteGuildApplicationCommand(clientId: string, guildId: string, body: Array<POSTApplicationCommandStructure>): Promise<Array<LocalizationGuildApplicationCommandStructure>>;
    getGuildApplicationCommandPermissions(clientId: string, guildId: string): Promise<Array<GuildApplicationCommandPermissionsStructure>>;
    getApplicationCommandPermissions(clientId: string, guildId: string, commandId: string): Promise<GuildApplicationCommandPermissionsStructure>;
    editApplicationCommandPermissions(clientId: string, guildId: string, commandId: string, body: {
        permissions: Array<ApplicationCommandPermissionsStructure>;
    }): Promise<GuildApplicationCommandPermissionsStructure>;
    createInteractionResponse(interactionId: string, interactionToken: string, body: InteractionResponseStructure): Promise<null>;
    getOriginalInteractionResponse(clientId: string, interactionToken: string): Promise<InteractionResponseStructure>;
    editOriginalInteractionResponse(clientId: string, interactionToken: string, body: EditWebhookStructure): Promise<InteractionResponseStructure>;
    deleteOriginalInteractionResponse(clientId: string, interactionToken: string): Promise<null>;
    createFollowupMessage(clientId: string, interactionToken: string, body: ExecuteWebhookStructure): Promise<MessageStructure>;
    getFollowupMessage(clientId: string, interactionToken: string, messageId: string): Promise<InteractionResponseStructure>;
    editFollowupMessage(clientId: string, interactionToken: string, messageId: string, body: EditWebhookStructure): Promise<InteractionResponseStructure>;
    deleteFollowupMessage(clientId: string, interactionToken: string, messageId: string): Promise<null>;
    getCurrentApplication(): Promise<ApplicationStructure>;
    editCurrentApplication(app: PATCHCurrentApplication): Promise<ApplicationStructure>;
    getGuildAuditLog(guildId: string, params: {
        user_id?: string;
        action_type?: AuditLogEvent;
        before?: string;
        after?: string;
        limit?: number;
    }): Promise<AuditLogStructure>;
    getChannel(channelId: string): Promise<ChannelStructure>;
    modifyChannel(channelId: string, body: ModifyGuildChannelStructure | ModifyDMChannelStructure | ModifyThreadChannelStructure): Promise<ChannelStructure>;
    deleteChannel(channelId: string, reason?: string): Promise<ChannelStructure>;
    getChannelMessages(channelId: string, params: GetChannelMessagesStructure): Promise<Array<MessageStructure>>;
    getChannelMessage(channelId: string, messageId: string): Promise<MessageStructure>;
    createMessage(channelId: string, body: CreateMessageStructure): Promise<MessageStructure>;
    crosspostMessage(channelId: string, messageId: string): Promise<MessageStructure>;
    createReaction(channelId: string, messageId: string, emoji: string, isCustom?: boolean): Promise<null>;
    deleteOwnReaction(channelId: string, messageId: string, emoji: string, isCustom?: boolean): Promise<null>;
    deleteUserReaction(channelId: string, messageId: string, userId: string, emoji: string, isCustom?: boolean): Promise<null>;
    getReactions(channelId: string, messageId: string, emoji: string, isCustom?: boolean, params?: {
        after?: number;
        limit?: string;
    }): Promise<Array<UserStructure>>;
    deleteAllReactions(channelId: string, messageId: string): Promise<null>;
    deleteAllReactionsForEmoji(channelId: string, messageId: string, emoji: string, isCustom?: boolean): Promise<null>;
    editMessage(channelId: string, messageId: string, params: EditMessageStructure): Promise<MessageStructure>;
    deleteMessage(channelId: string, messageId: string, reason?: string): Promise<null>;
    bulkDeleteMessages(channelId: string, messageIds: Array<string>, reason?: string): Promise<null>;
    editChannelPermissions(channelId: string, overwriteId: string, params: {
        reason?: string;
        allow?: string | null;
        deny?: string | null;
        type: 0 | 1;
    }): Promise<null>;
    getChannelInvites(channelId: string): Promise<Array<InviteStructure>>;
    createChannelInvite(channelId: string, body: CreateChannelInviteStructure): Promise<InviteStructure>;
    deleteChannelPermission(channelId: string, overwriteId: string, reason?: string): Promise<null>;
    followAnnouncementChannel(channelId: string, body: {
        webhook_channel_id?: string;
    }): Promise<FollowedChannelStructure>;
    triggerTypingIndicator(channelId: string): Promise<null>;
    getPinnedMessages(channelId: string): Promise<null>;
    pinMessage(channelId: string, messageId: string, reason?: string): Promise<null>;
    unpinMessage(channelId: string, messageId: string, reason?: string): Promise<null>;
    groupDMAddRecipient(channelId: string, userId: string, body: {
        access_token: string;
        nick: string;
    }): Promise<null>;
    groupDMRemoveRecipient(channelId: string, userId: string): Promise<null>;
    startThreadFromMessage(channelId: string, messageId: string, body: CreateThreadFromMessageStructure): Promise<ChannelStructure>;
    startThreadWithoutMessage(channelId: string, body: CreateThreadStructure): Promise<ChannelStructure>;
    startThreadInForumOrMediaChannel(channelId: string, body: CreateForumMediaThreadStructure): Promise<ChannelStructure>;
    joinThread(channelId: string): Promise<null>;
    addThreadMember(channelId: string, userId: string): Promise<null>;
    leaveThread(channelId: string): Promise<null>;
    removeThreadMember(channelId: string, userId: string): Promise<null>;
    getThreadMember(channelId: string, userId: string, withMember?: boolean): Promise<ThreadMemberStructure>;
    listThreadMembers(channelId: string, params?: {
        after?: number;
        limit?: string;
    }): Promise<Array<ThreadMemberStructure>>;
    listPublicArchivedThreads(channelId: string, params?: {
        before?: string;
        limit?: string;
    }): Promise<ListArchivedThreadsReturnStructure>;
    listPrivateArchivedThreads(channelId: string, params?: {
        before?: string;
        limit?: string;
    }): Promise<ListArchivedThreadsReturnStructure>;
    listJoinedPrivateArchivedThreads(channelId: string, params?: {
        before?: string;
        limit?: string;
    }): Promise<ListArchivedThreadsReturnStructure>;
    listGuildEmojis(guildId: string): Promise<Array<EmojiStructure>>;
    getGuildEmoji(guildId: string, emojiId: string): Promise<EmojiStructure>;
    createGuildEmoji(guildId: string, params: {
        name: string;
        image: ImageData;
        roles: Array<string>;
        reason?: string;
    }): Promise<EmojiStructure>;
    modifyGuildEmoji(guildId: string, emojiId: string, params: {
        name?: string;
        roles?: Array<string> | null;
        reason: string;
    }): Promise<EmojiStructure>;
    deleteGuildEmoji(guildId: string, emojiId: string, reason?: string): Promise<null>;
    createGuild(body: CreateGuildStructure): Promise<GuildStructure>;
    getGuild(guildId: string, withCounts?: boolean): Promise<GuildStructure>;
    getGuildPreview(guildId: string): Promise<GuildPreviewStructure>;
    modifyGuild(guildId: string, body: ModifyGuildStructure): Promise<GuildStructure>;
    deleteGuild(guildId: string): Promise<null>;
    getGuildChannels(guildId: string): Promise<Array<ChannelStructure>>;
    createGuildChannel(guildId: string, body: CreateGuildChannelStructure): Promise<ChannelStructure>;
    modifyGuildChannelPositions(guildId: string, body: Array<ModifyChannelPositionStructure>): Promise<ChannelStructure>;
    listActiveGuildThreads(guildId: string): Promise<{
        threads: Array<ThreadChannelStructure>;
        members: Array<ThreadMemberStructure>;
    }>;
    getGuildMember(guildId: string, userId: string): Promise<GuildMemberStructure>;
    listGuildMembers(guildId: string, params: {
        limit: number;
        after: string;
    }): Promise<Array<GuildMemberStructure>>;
    searchGuildMembers(guildId: string, params: {
        query: string;
        limit: number;
    }): Promise<Array<GuildMemberStructure>>;
    addGuildMember(guildId: string, userId: string, body: {
        access_token: string;
        nick?: string;
        roles?: Array<string>;
        mute?: boolean;
        deaf?: boolean;
    }): Promise<GuildMemberStructure>;
    modifyGuildMember(guildId: string, userId: string, body: {
        reason?: string | null;
        nick?: string | null;
        roles?: Array<string> | null;
        mute?: boolean | null;
        deaf?: boolean | null;
        channel_id?: string | null;
        communication_disabled_until?: string | null;
        flags?: number | null;
    }): Promise<GuildMemberStructure>;
    modifyCurrentMember(guildId: string, body: {
        reason?: string | null;
        nick?: string | null;
    }): Promise<GuildMemberStructure>;
    addGuildMemberRole(guildId: string, userId: string, roleId: string, reason: string): Promise<null>;
    removeGuildMemberRole(guildId: string, userId: string, roleId: string, reason: string): Promise<null>;
    removeGuildMember(guildId: string, userId: string, reason: string): Promise<null>;
    getGuildBans(guildId: string, params: {
        before: string;
        after: string;
        limit: string;
    }): Promise<Array<BanStructure>>;
    getGuildBan(guildId: string, userId: string): Promise<BanStructure>;
    createGuildBan(guildId: string, userId: string, body: {
        reason?: string;
        delete_message_seconds?: number;
    }): Promise<null>;
    removeGuildBan(guildId: string, userId: string, reason?: string): Promise<null>;
    getGuildRoles(guildId: string): Promise<Array<RoleStructure>>;
    createGuildRole(guildId: string, body: APIRoleStructure): Promise<RoleStructure>;
    modifyGuildRolePosition(guildId: string, body: {
        reason?: string;
        id: string;
        position?: number | null;
    }): Promise<Array<RoleStructure>>;
    modifyGuildRole(guildId: string, roleId: string, body: Partial<APIRoleStructure>): Promise<RoleStructure>;
    modifyGuildMFALevel(guildId: string, level: MFALevel): Promise<MFALevel>;
    deleteGuildRole(guildId: string, roleId: string, reason?: string): Promise<null>;
    getGuildPruneCount(guildId: string, params: {
        days: number;
        include_roles?: string;
    }): Promise<{
        pruned: number;
    }>;
    beginGuildPrune(guildId: string, body: {
        days?: number;
        compute_prune_count?: boolean;
        include_roles?: Array<string>;
        reason?: string;
    }): Promise<{
        pruned: number | null;
    }>;
    getGuildVoiceRegions(guildId: string): Promise<Array<VoiceRegionStructure>>;
    getGuildInvites(guildId: string): Promise<Array<InviteStructure>>;
    getGuildIntegrations(guildId: string): Promise<Array<IntegrationStructure>>;
    deleteGuildIntegration(guildId: string, integrationId: string, reason?: string): Promise<null>;
    getGuildWidgetSettings(guildId: string): Promise<GuildWidgetSettingsStructure>;
    modifyGuildWidget(guildId: string, body: GuildWidgetSettingsStructure & {
        reason?: string;
    }): Promise<GuildWidgetSettingsStructure>;
    getGuildWidget(guildId: string): Promise<GuildWidgetStructure>;
    getGuildVanityUrl(guildId: string): Promise<Partial<InviteStructure>>;
    getGuildWidgetImage(guildId: string, style?: string): Promise<string>;
    getGuildWelcomeScreen(guildId: string): Promise<WelcomeScreenStructure>;
    modifyGuildWelcomeScreen(guildId: string, body: {
        reason?: string;
        enabled?: boolean | null;
        welcome_channels?: Array<WelcomeScreenChannelStructure> | null;
        description?: string | null;
    }): Promise<WelcomeScreenStructure>;
    getGuildOnboarding(guildId: string): Promise<GuildOnboardingStructure>;
    modifyGuildOnboarding(guildId: string, body: {
        reason?: string;
        prompts: Array<OnboardingPromptStructure>;
        default_channel_ids: Array<string>;
        enabled: boolean;
        mode: OnboardingMode;
    }): Promise<GuildOnboardingStructure>;
    modifyCurrentUserVoiceState(guildId: string, body: {
        channel_id?: string;
        suppress?: boolean;
        request_to_speak_timestamp?: string | null;
    }): Promise<null>;
    modifyUserVoiceState(guildId: string, userId: string, body: {
        channel_id: string;
        suppress?: boolean;
    }): Promise<null>;
    getInvite(inviteCode: string): Promise<InviteStructure>;
    deleteInvite(inviteCode: string, reason?: string): Promise<InviteStructure>;
    getSticker(stickerId: string): Promise<StickerStructure>;
    listStickerPacks(): Promise<{
        sticker_packs: Array<StickerPackStructure>;
    }>;
    listGuildStickers(guildId: string): Promise<Array<StickerStructure>>;
    getGuildSticker(guildId: string, stickerId: string): Promise<StickerStructure>;
    createGuildSticker(guildId: string, stickerId: string, params: {
        name: string;
        description: string;
        tags: string;
        file: Blob;
        reason?: string;
    }): Promise<StickerStructure>;
    modifyGuildSticker(guildId: string, stickerId: string, params: {
        name?: string;
        description?: string;
        tags?: string;
        reason?: string;
    }): Promise<StickerStructure>;
    deleteGuildSticker(guildId: string, stickerId: string, reason?: string): Promise<null>;
    getCurrentUser(): Promise<UserStructure>;
    getUser(userId: string): Promise<UserStructure>;
    modifyCurrentUser(body?: {
        username?: string;
        avatar?: string;
    }): Promise<UserStructure>;
    getCurrentUserGuilds(params: {
        before: string;
        after: string;
        limit: string;
        withCounts: boolean;
    }): Promise<Array<Partial<GuildStructure>>>;
    getCurrentUserGuildMember(guildId: string): Promise<GuildMemberStructure>;
    leaveGuild(guildId: string): Promise<null>;
    createDM(userId: string): Promise<DMChannelStructure>;
    createGroupDM(tokens: Array<string>, nicks: Record<string, string>): Promise<DMChannelStructure>;
}
//# sourceMappingURL=rest.d.ts.map