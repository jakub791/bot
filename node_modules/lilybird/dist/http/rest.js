import { version } from "../../package.json" with { type: "json" };
export class RestError extends Error {
    code;
    errors;
    constructor(error) {
        super(error.message);
        this.code = error.code;
        this.errors = error.errors;
    }
}
export class REST {
    static BaseURL = "https://discord.com/api/v10/";
    #token;
    #headers;
    constructor(token) {
        if (typeof token === "undefined")
            return;
        this.#token = token;
        this.#buildHeaders();
    }
    async #makeAPIRequest(method, path, data, re) {
        const opts = {
            method,
            headers: this.#headers
        };
        if (data instanceof FormData) {
            opts.body = data;
            if (typeof re !== "undefined") {
                opts.headers["X-Audit-Log-Reason"] = re;
            }
        }
        else if (typeof data !== "undefined") {
            const { files, reason, ...obj } = data;
            if (typeof files !== "undefined" && files.length > 0) {
                const temp = [];
                const form = new FormData();
                for (let i = 0, { length } = files; i < length; i++) {
                    form.append(`files[${i}]`, files[i].file, files[i].name);
                    temp.push({
                        id: i,
                        filename: files[i].name
                    });
                }
                obj.attachments = [...temp, ...obj.attachments ?? []];
                form.append("payload_json", JSON.stringify(obj));
                opts.body = form;
            }
            else {
                opts.headers["Content-Type"] = "application/json";
                opts.body = JSON.stringify(data);
            }
            if (typeof reason !== "undefined") {
                opts.headers["X-Audit-Log-Reason"] = reason;
            }
        }
        const response = await fetch(`${REST.BaseURL}${path}`, opts);
        if (!response.ok) {
            const errorMessage = await response.json();
            throw new RestError(errorMessage);
        }
        if (response.status === 204)
            return null;
        return await response.json();
    }
    #buildHeaders() {
        this.#headers = {
            Authorization: `Bot ${this.#token}`,
            "User-Agent": `DiscordBot/LilyBird/${version}`
        };
    }
    setToken(token) {
        this.#token = token;
        this.#buildHeaders();
    }
    async getGateway() {
        return this.#makeAPIRequest("GET", "gateway");
    }
    async getGatewayBot() {
        return this.#makeAPIRequest("GET", "gateway/bot");
    }
    async getGlobalApplicationCommands(clientId, withLocalizations = false) {
        return this.#makeAPIRequest("GET", `applications/${clientId}/commands?with_localizations=${withLocalizations}`);
    }
    async createGlobalApplicationCommand(clientId, body) {
        return this.#makeAPIRequest("POST", `applications/${clientId}/commands`, body);
    }
    async getGlobalApplicationCommand(clientId, commandId) {
        return this.#makeAPIRequest("GET", `applications/${clientId}/commands/${commandId}`);
    }
    async editGlobalApplicationCommand(clientId, commandId, body) {
        return this.#makeAPIRequest("PATCH", `applications/${clientId}/commands/${commandId}`, body);
    }
    async deleteGlobalApplicationCommand(clientId, commandId) {
        return this.#makeAPIRequest("DELETE", `applications/${clientId}/commands/${commandId}`);
    }
    async bulkOverwriteGlobalApplicationCommand(clientId, body) {
        return this.#makeAPIRequest("PUT", `applications/${clientId}/commands`, body);
    }
    async getGuildApplicationCommands(clientId, withLocalizations = false) {
        return this.#makeAPIRequest("GET", `applications/${clientId}/commands?with_localizations=${withLocalizations}`);
    }
    async createGuildApplicationCommand(clientId, guildId, body) {
        return this.#makeAPIRequest("POST", `applications/${clientId}/guilds/${guildId}/commands`, body);
    }
    async getGuildApplicationCommand(clientId, guildId, commandId) {
        return this.#makeAPIRequest("POST", `applications/${clientId}/guilds/${guildId}/commands/${commandId}`);
    }
    async editGuildApplicationCommand(clientId, guildId, commandId, body) {
        return this.#makeAPIRequest("PATCH", `applications/${clientId}/guilds/${guildId}/commands/${commandId}`, body);
    }
    async deleteGuildApplicationCommand(clientId, guildId, commandId) {
        return this.#makeAPIRequest("DELETE", `applications/${clientId}/guilds/${guildId}/commands/${commandId}`);
    }
    async bulkOverwriteGuildApplicationCommand(clientId, guildId, body) {
        return this.#makeAPIRequest("PATCH", `applications/${clientId}/guilds/${guildId}/commands`, body);
    }
    async getGuildApplicationCommandPermissions(clientId, guildId) {
        return this.#makeAPIRequest("GET", `applications/${clientId}/guilds/${guildId}/commands/permissions`);
    }
    async getApplicationCommandPermissions(clientId, guildId, commandId) {
        return this.#makeAPIRequest("GET", `applications/${clientId}/guilds/${guildId}/commands/${commandId}/permissions`);
    }
    async editApplicationCommandPermissions(clientId, guildId, commandId, body) {
        return this.#makeAPIRequest("PATCH", `applications/${clientId}/guilds/${guildId}/commands/${commandId}/permissions`, body);
    }
    async createInteractionResponse(interactionId, interactionToken, body) {
        return this.#makeAPIRequest("POST", `interactions/${interactionId}/${interactionToken}/callback`, body);
    }
    async getOriginalInteractionResponse(clientId, interactionToken) {
        return this.#makeAPIRequest("GET", `webhooks/${clientId}/${interactionToken}/messages/@original`);
    }
    async editOriginalInteractionResponse(clientId, interactionToken, body) {
        return this.#makeAPIRequest("PATCH", `webhooks/${clientId}/${interactionToken}/messages/@original`, body);
    }
    async deleteOriginalInteractionResponse(clientId, interactionToken) {
        return this.#makeAPIRequest("DELETE", `webhooks/${clientId}/${interactionToken}/messages/@original`);
    }
    async createFollowupMessage(clientId, interactionToken, body) {
        return this.#makeAPIRequest("POST", `webhooks/${clientId}/${interactionToken}`, body);
    }
    async getFollowupMessage(clientId, interactionToken, messageId) {
        return this.#makeAPIRequest("GET", `webhooks/${clientId}/${interactionToken}/messages/${messageId}`);
    }
    async editFollowupMessage(clientId, interactionToken, messageId, body) {
        return this.#makeAPIRequest("PATCH", `webhooks/${clientId}/${interactionToken}/messages/${messageId}`, body);
    }
    async deleteFollowupMessage(clientId, interactionToken, messageId) {
        return this.#makeAPIRequest("DELETE", `webhooks/${clientId}/${interactionToken}/messages/${messageId}`);
    }
    async getCurrentApplication() {
        return this.#makeAPIRequest("GET", "applications/@me");
    }
    async editCurrentApplication(app) {
        return this.#makeAPIRequest("PATCH", "applications/@me", app);
    }
    async getGuildAuditLog(guildId, params) {
        let url = `guilds/${guildId}/audit-logs?`;
        if (typeof params.user_id !== "undefined")
            url += `user_id=${params.user_id}&`;
        if (typeof params.action_type !== "undefined")
            url += `action_type=${params.action_type}&`;
        if (typeof params.before !== "undefined")
            url += `before=${params.before}&`;
        if (typeof params.after !== "undefined")
            url += `after=${params.after}&`;
        if (typeof params.limit !== "undefined")
            url += `limit=${params.limit}`;
        return this.#makeAPIRequest("GET", url);
    }
    async getChannel(channelId) {
        return this.#makeAPIRequest("GET", `channels/${channelId}`);
    }
    async modifyChannel(channelId, body) {
        return this.#makeAPIRequest("PATCH", `channels/${channelId}`, body);
    }
    async deleteChannel(channelId, reason) {
        return this.#makeAPIRequest("DELETE", `channels/${channelId}`, { reason });
    }
    async getChannelMessages(channelId, params) {
        let url = `channels/${channelId}/messages?`;
        if (typeof params.around !== "undefined")
            url += `around=${params.around}&`;
        if (typeof params.before !== "undefined")
            url += `before=${params.before}&`;
        if (typeof params.after !== "undefined")
            url += `after=${params.after}&`;
        if (typeof params.limit !== "undefined")
            url += `limit=${params.limit}`;
        return this.#makeAPIRequest("GET", url);
    }
    async getChannelMessage(channelId, messageId) {
        return this.#makeAPIRequest("GET", `channels/${channelId}/messages/${messageId}`);
    }
    async createMessage(channelId, body) {
        return this.#makeAPIRequest("POST", `channels/${channelId}/messages`, body);
    }
    async crosspostMessage(channelId, messageId) {
        return this.#makeAPIRequest("POST", `channels/${channelId}/messages/${messageId}/crosspost`);
    }
    async createReaction(channelId, messageId, emoji, isCustom = false) {
        if (!isCustom)
            emoji = encodeURIComponent(emoji);
        return this.#makeAPIRequest("PUT", `channels/${channelId}/messages/${messageId}/reactions/${emoji}/@me`);
    }
    async deleteOwnReaction(channelId, messageId, emoji, isCustom = false) {
        if (!isCustom)
            emoji = encodeURIComponent(emoji);
        return this.#makeAPIRequest("DELETE", `channels/${channelId}/messages/${messageId}/reactions/${emoji}/@me`);
    }
    async deleteUserReaction(channelId, messageId, userId, emoji, isCustom = false) {
        if (!isCustom)
            emoji = encodeURIComponent(emoji);
        return this.#makeAPIRequest("DELETE", `channels/${channelId}/messages/${messageId}/reactions/${emoji}/${userId}`);
    }
    async getReactions(channelId, messageId, emoji, isCustom = false, params = {}) {
        if (!isCustom)
            emoji = encodeURIComponent(emoji);
        let url = `channels/${channelId}/messages/${messageId}/reactions/${emoji}?`;
        if (typeof params.after !== "undefined")
            url += `after=${params.after}&`;
        if (typeof params.limit !== "undefined")
            url += `limit=${params.limit}`;
        return this.#makeAPIRequest("GET", url);
    }
    async deleteAllReactions(channelId, messageId) {
        return this.#makeAPIRequest("DELETE", `channels/${channelId}/messages/${messageId}/reactions`);
    }
    async deleteAllReactionsForEmoji(channelId, messageId, emoji, isCustom = false) {
        if (!isCustom)
            emoji = encodeURIComponent(emoji);
        return this.#makeAPIRequest("DELETE", `channels/${channelId}/messages/${messageId}/reactions/${emoji}`);
    }
    async editMessage(channelId, messageId, params) {
        return this.#makeAPIRequest("PATCH", `channels/${channelId}/messages/${messageId}`, params);
    }
    async deleteMessage(channelId, messageId, reason) {
        return this.#makeAPIRequest("DELETE", `channels/${channelId}/messages/${messageId}`, { reason });
    }
    async bulkDeleteMessages(channelId, messageIds, reason) {
        return this.#makeAPIRequest("POST", `channels/${channelId}/messages/bulk-delete`, { messages: messageIds, reason });
    }
    async editChannelPermissions(channelId, overwriteId, params) {
        return this.#makeAPIRequest("PUT", `channels/${channelId}/permissions/${overwriteId}`, params);
    }
    async getChannelInvites(channelId) {
        return this.#makeAPIRequest("GET", `channels/${channelId}/invites`);
    }
    async createChannelInvite(channelId, body) {
        return this.#makeAPIRequest("POST", `channels/${channelId}/invites`, body);
    }
    async deleteChannelPermission(channelId, overwriteId, reason) {
        return this.#makeAPIRequest("DELETE", `channels/${channelId}/permissions/${overwriteId}`, { reason });
    }
    async followAnnouncementChannel(channelId, body) {
        return this.#makeAPIRequest("DELETE", `channels/${channelId}/followers`, body);
    }
    async triggerTypingIndicator(channelId) {
        return this.#makeAPIRequest("POST", `channels/${channelId}/typing`);
    }
    async getPinnedMessages(channelId) {
        return this.#makeAPIRequest("GET", `channels/${channelId}/pins`);
    }
    async pinMessage(channelId, messageId, reason) {
        return this.#makeAPIRequest("PUT", `channels/${channelId}/pins/${messageId}`, { reason });
    }
    async unpinMessage(channelId, messageId, reason) {
        return this.#makeAPIRequest("DELETE", `channels/${channelId}/pins/${messageId}`, { reason });
    }
    async groupDMAddRecipient(channelId, userId, body) {
        return this.#makeAPIRequest("PUT", `channels/${channelId}/recipients/${userId}`, body);
    }
    async groupDMRemoveRecipient(channelId, userId) {
        return this.#makeAPIRequest("DELETE", `channels/${channelId}/recipients/${userId}`);
    }
    async startThreadFromMessage(channelId, messageId, body) {
        return this.#makeAPIRequest("POST", `channels/${channelId}/messages/${messageId}/threads`, body);
    }
    async startThreadWithoutMessage(channelId, body) {
        return this.#makeAPIRequest("POST", `channels/${channelId}/threads`, body);
    }
    async startThreadInForumOrMediaChannel(channelId, body) {
        return this.#makeAPIRequest("POST", `channels/${channelId}/threads`, body);
    }
    async joinThread(channelId) {
        return this.#makeAPIRequest("PUT", `channels/${channelId}/thread-members/@me`);
    }
    async addThreadMember(channelId, userId) {
        return this.#makeAPIRequest("PUT", `channels/${channelId}/thread-members/${userId}`);
    }
    async leaveThread(channelId) {
        return this.#makeAPIRequest("DELETE", `channels/${channelId}/thread-members/@me`);
    }
    async removeThreadMember(channelId, userId) {
        return this.#makeAPIRequest("DELETE", `channels/${channelId}/thread-members/${userId}`);
    }
    async getThreadMember(channelId, userId, withMember = false) {
        return this.#makeAPIRequest("GET", `channels/${channelId}/thread-members/${userId}?with_member=${withMember}`);
    }
    async listThreadMembers(channelId, params = {}) {
        let url = `channels/${channelId}/thread-members`;
        if (typeof params.after !== "undefined")
            url += `after=${params.after}&`;
        if (typeof params.limit !== "undefined")
            url += `limit=${params.limit}`;
        return this.#makeAPIRequest("GET", url);
    }
    async listPublicArchivedThreads(channelId, params = {}) {
        let url = `channels/${channelId}/threads/archived/public`;
        if (typeof params.before !== "undefined")
            url += `before=${params.before}&`;
        if (typeof params.limit !== "undefined")
            url += `limit=${params.limit}`;
        return this.#makeAPIRequest("GET", url);
    }
    async listPrivateArchivedThreads(channelId, params = {}) {
        let url = `channels/${channelId}/threads/archived/private`;
        if (typeof params.before !== "undefined")
            url += `before=${params.before}&`;
        if (typeof params.limit !== "undefined")
            url += `limit=${params.limit}`;
        return this.#makeAPIRequest("GET", url);
    }
    async listJoinedPrivateArchivedThreads(channelId, params = {}) {
        let url = `channels/${channelId}/users/@me/threads/archived/private`;
        if (typeof params.before !== "undefined")
            url += `before=${params.before}&`;
        if (typeof params.limit !== "undefined")
            url += `limit=${params.limit}`;
        return this.#makeAPIRequest("GET", url);
    }
    async listGuildEmojis(guildId) {
        return this.#makeAPIRequest("GET", `guilds/${guildId}/emojis`);
    }
    async getGuildEmoji(guildId, emojiId) {
        return this.#makeAPIRequest("GET", `guilds/${guildId}/emojis/${emojiId}`);
    }
    async createGuildEmoji(guildId, params) {
        return this.#makeAPIRequest("POST", `guilds/${guildId}/emojis`, params);
    }
    async modifyGuildEmoji(guildId, emojiId, params) {
        return this.#makeAPIRequest("PATCH", `guilds/${guildId}/emojis/${emojiId}`, params);
    }
    async deleteGuildEmoji(guildId, emojiId, reason) {
        return this.#makeAPIRequest("DELETE", `guilds/${guildId}/emojis/${emojiId}`, { reason });
    }
    async createGuild(body) {
        return this.#makeAPIRequest("POST", "guilds", body);
    }
    async getGuild(guildId, withCounts = false) {
        return this.#makeAPIRequest("GET", `guilds/${guildId}?with_counts=${withCounts}`);
    }
    async getGuildPreview(guildId) {
        return this.#makeAPIRequest("GET", `guilds/${guildId}/preview`);
    }
    async modifyGuild(guildId, body) {
        return this.#makeAPIRequest("PATCH", `guilds/${guildId}`, body);
    }
    async deleteGuild(guildId) {
        return this.#makeAPIRequest("DELETE", `guilds/${guildId}`);
    }
    async getGuildChannels(guildId) {
        return this.#makeAPIRequest("GET", `guilds/${guildId}/channels`);
    }
    async createGuildChannel(guildId, body) {
        return this.#makeAPIRequest("POST", `guilds/${guildId}/channels`, body);
    }
    async modifyGuildChannelPositions(guildId, body) {
        return this.#makeAPIRequest("PATCH", `guilds/${guildId}/channels`, body);
    }
    async listActiveGuildThreads(guildId) {
        return this.#makeAPIRequest("GET", `guilds/${guildId}/threads/active`);
    }
    async getGuildMember(guildId, userId) {
        return this.#makeAPIRequest("GET", `guilds/${guildId}/members/${userId}`);
    }
    async listGuildMembers(guildId, params) {
        let url = `guilds/${guildId}/members`;
        if (typeof params.after !== "undefined")
            url += `after=${params.after}&`;
        if (typeof params.limit !== "undefined")
            url += `limit=${params.limit}`;
        return this.#makeAPIRequest("GET", url);
    }
    async searchGuildMembers(guildId, params) {
        let url = `guilds/${guildId}/members/search`;
        if (typeof params.query !== "undefined")
            url += `query=${params.query}&`;
        if (typeof params.limit !== "undefined")
            url += `limit=${params.limit}`;
        return this.#makeAPIRequest("GET", url);
    }
    async addGuildMember(guildId, userId, body) {
        return this.#makeAPIRequest("PUT", `guilds/${guildId}/members/${userId}`, body);
    }
    async modifyGuildMember(guildId, userId, body) {
        return this.#makeAPIRequest("PATCH", `guilds/${guildId}/members/${userId}`, body);
    }
    async modifyCurrentMember(guildId, body) {
        return this.#makeAPIRequest("PATCH", `guilds/${guildId}/members/@me`, body);
    }
    async addGuildMemberRole(guildId, userId, roleId, reason) {
        return this.#makeAPIRequest("PUT", `guilds/${guildId}/members/${userId}/roles/${roleId}`, { reason });
    }
    async removeGuildMemberRole(guildId, userId, roleId, reason) {
        return this.#makeAPIRequest("DELETE", `guilds/${guildId}/members/${userId}/roles/${roleId}`, { reason });
    }
    async removeGuildMember(guildId, userId, reason) {
        return this.#makeAPIRequest("DELETE", `guilds/${guildId}/members/${userId}`, { reason });
    }
    async getGuildBans(guildId, params) {
        let url = `guilds/${guildId}/bans`;
        if (typeof params.before !== "undefined")
            url += `before=${params.before}&`;
        if (typeof params.after !== "undefined")
            url += `after=${params.after}&`;
        if (typeof params.limit !== "undefined")
            url += `limit=${params.limit}`;
        return this.#makeAPIRequest("GET", url);
    }
    async getGuildBan(guildId, userId) {
        return this.#makeAPIRequest("GET", `guilds/${guildId}/bans/${userId}`);
    }
    async createGuildBan(guildId, userId, body) {
        return this.#makeAPIRequest("PUT", `guilds/${guildId}/bans/${userId}`, body);
    }
    async removeGuildBan(guildId, userId, reason) {
        return this.#makeAPIRequest("PUT", `guilds/${guildId}/bans/${userId}`, { reason });
    }
    async getGuildRoles(guildId) {
        return this.#makeAPIRequest("GET", `guilds/${guildId}/roles`);
    }
    async createGuildRole(guildId, body) {
        return this.#makeAPIRequest("POST", `guilds/${guildId}/roles`, body);
    }
    async modifyGuildRolePosition(guildId, body) {
        return this.#makeAPIRequest("PATCH", `guilds/${guildId}/roles`, body);
    }
    async modifyGuildRole(guildId, roleId, body) {
        return this.#makeAPIRequest("PATCH", `guilds/${guildId}/roles/${roleId}`, body);
    }
    async modifyGuildMFALevel(guildId, level) {
        return this.#makeAPIRequest("POST", `guilds/${guildId}/mfa`, { level });
    }
    async deleteGuildRole(guildId, roleId, reason) {
        return this.#makeAPIRequest("DELETE", `guilds/${guildId}/roles/${roleId}`, { reason });
    }
    async getGuildPruneCount(guildId, params) {
        let url = `guilds/${guildId}/prune`;
        if (typeof params.days !== "undefined")
            url += `days=${params.days}&`;
        if (typeof params.include_roles !== "undefined")
            url += `include_roles=${params.include_roles}`;
        return this.#makeAPIRequest("GET", url);
    }
    async beginGuildPrune(guildId, body) {
        return this.#makeAPIRequest("POST", `guilds/${guildId}/prune`, body);
    }
    async getGuildVoiceRegions(guildId) {
        return this.#makeAPIRequest("GET", `guilds/${guildId}/regions`);
    }
    async getGuildInvites(guildId) {
        return this.#makeAPIRequest("GET", `guilds/${guildId}/invites`);
    }
    async getGuildIntegrations(guildId) {
        return this.#makeAPIRequest("GET", `guilds/${guildId}/integrations`);
    }
    async deleteGuildIntegration(guildId, integrationId, reason) {
        return this.#makeAPIRequest("DELETE", `guilds/${guildId}/integrations/${integrationId}`, { reason });
    }
    async getGuildWidgetSettings(guildId) {
        return this.#makeAPIRequest("GET", `guilds/${guildId}/widget`);
    }
    async modifyGuildWidget(guildId, body) {
        return this.#makeAPIRequest("PATCH", `guilds/${guildId}/widget`, body);
    }
    async getGuildWidget(guildId) {
        return this.#makeAPIRequest("GET", `guilds/${guildId}/widget.json`);
    }
    async getGuildVanityUrl(guildId) {
        return this.#makeAPIRequest("GET", `guilds/${guildId}/vanity-url`);
    }
    async getGuildWidgetImage(guildId, style = "shield") {
        return this.#makeAPIRequest("GET", `guilds/${guildId}/widget.png?style=${style}`);
    }
    async getGuildWelcomeScreen(guildId) {
        return this.#makeAPIRequest("GET", `guilds/${guildId}/welcome-screen`);
    }
    async modifyGuildWelcomeScreen(guildId, body) {
        return this.#makeAPIRequest("PATCH", `guilds/${guildId}/welcome-screen`, body);
    }
    async getGuildOnboarding(guildId) {
        return this.#makeAPIRequest("GET", `guilds/${guildId}/onboarding`);
    }
    async modifyGuildOnboarding(guildId, body) {
        return this.#makeAPIRequest("PUT", `guilds/${guildId}/onboarding`, body);
    }
    async modifyCurrentUserVoiceState(guildId, body) {
        return this.#makeAPIRequest("PATCH", `guilds/${guildId}/voice-states/@me`, body);
    }
    async modifyUserVoiceState(guildId, userId, body) {
        return this.#makeAPIRequest("PATCH", `guilds/${guildId}/voice-states/${userId}`, body);
    }
    async getInvite(inviteCode) {
        return this.#makeAPIRequest("GET", `invites/${inviteCode}`);
    }
    async deleteInvite(inviteCode, reason) {
        return this.#makeAPIRequest("DELETE", `invites/${inviteCode}`, { reason });
    }
    async getSticker(stickerId) {
        return this.#makeAPIRequest("GET", `stickers/${stickerId}`);
    }
    async listStickerPacks() {
        return this.#makeAPIRequest("GET", "sticker-packs");
    }
    async listGuildStickers(guildId) {
        return this.#makeAPIRequest("GET", `guilds/${guildId}/stickers`);
    }
    async getGuildSticker(guildId, stickerId) {
        return this.#makeAPIRequest("GET", `guilds/${guildId}/stickers/${stickerId}`);
    }
    async createGuildSticker(guildId, stickerId, params) {
        const form = new FormData();
        const { reason, ...obj } = params;
        for (const key in obj)
            form.append(key, obj[key]);
        return this.#makeAPIRequest("POST", `guilds/${guildId}/stickers/${stickerId}`, form, reason);
    }
    async modifyGuildSticker(guildId, stickerId, params) {
        return this.#makeAPIRequest("PATCH", `guilds/${guildId}/stickers/${stickerId}`, params);
    }
    async deleteGuildSticker(guildId, stickerId, reason) {
        return this.#makeAPIRequest("DELETE", `guilds/${guildId}/stickers/${stickerId}`, { reason });
    }
    async getCurrentUser() {
        return this.#makeAPIRequest("GET", "users/@me");
    }
    async getUser(userId) {
        return this.#makeAPIRequest("GET", `users/${userId}`);
    }
    async modifyCurrentUser(body) {
        return this.#makeAPIRequest("PATCH", "users/@me", body);
    }
    async getCurrentUserGuilds(params) {
        let url = "users/@me/guilds?";
        if (typeof params.withCounts !== "undefined")
            url += `with_counts=${params.withCounts}&`;
        if (typeof params.before !== "undefined")
            url += `before=${params.before}&`;
        if (typeof params.after !== "undefined")
            url += `after=${params.after}&`;
        if (typeof params.limit !== "undefined")
            url += `limit=${params.limit}`;
        return this.#makeAPIRequest("GET", url);
    }
    async getCurrentUserGuildMember(guildId) {
        return this.#makeAPIRequest("GET", `users/@me/guilds/${guildId}/member`);
    }
    async leaveGuild(guildId) {
        return this.#makeAPIRequest("DELETE", `users/@me/guilds/${guildId}`);
    }
    async createDM(userId) {
        return this.#makeAPIRequest("POST", "users/@me/channels", { recipient_id: userId });
    }
    async createGroupDM(tokens, nicks) {
        return this.#makeAPIRequest("POST", "users/@me/channels", { access_tokens: tokens, nicks });
    }
}
