import type { GlobalSlashCommand, GuildSlashCommand } from "./slash-command.js";
import type { MessageCommand } from "./message-commands.js";
import type { Event } from "./events.js";
import type { ClientEventListeners, BaseClientOptions, Client } from "lilybird";
interface HandlerDirectories {
    slashCommands?: string;
    messageCommands?: string;
    listeners?: string;
}
export declare class Handler {
    #private;
    protected readonly guildSlashCommands: Map<string, GuildSlashCommand>;
    protected readonly globalSlashCommands: Map<string, GlobalSlashCommand>;
    protected readonly messageCommands: Map<string, MessageCommand>;
    protected readonly events: Map<keyof ClientEventListeners, Event<keyof ClientEventListeners, Required<ClientEventListeners>>>;
    protected readonly messageCommandAliases: Map<string, string>;
    protected readonly dirs: HandlerDirectories;
    protected readonly prefix: string;
    constructor(dirs: HandlerDirectories, prefix?: string);
    registerGlobalCommands(client: Client): Promise<void>;
    registerGuildCommands(client: Client): Promise<void>;
    readSlashCommandDir(dir?: string | undefined): Promise<boolean>;
    readEventDir(dir?: string | undefined): Promise<boolean>;
    readMessageCommandDir(dir?: string | undefined): Promise<boolean>;
    private onInteraction;
    private onMessage;
    buildListeners(): Promise<ClientEventListeners>;
}
type Expand<T> = T extends Function ? T : {
    [K in keyof T]: T[K];
};
export declare function createHandler({ dirs, prefix }: {
    dirs: HandlerDirectories;
    prefix?: string | undefined;
}): Promise<Expand<Pick<Required<BaseClientOptions>, "listeners" | "setup">>>;
export {};
//# sourceMappingURL=handler.d.ts.map