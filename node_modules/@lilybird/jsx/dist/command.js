/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/naming-convention */
import { ApplicationCommandOptionType, ApplicationCommandType } from "lilybird";
export function ApplicationCommand({ name, description, defaultMemberPermissions, dmPermission, name_localizations, description_localizations, nsfw, children }) {
    if (children != null && !Array.isArray(children))
        children = [children];
    return {
        type: ApplicationCommandType.CHAT_INPUT,
        name,
        description,
        dm_permission: dmPermission,
        name_localizations,
        description_localizations,
        nsfw,
        default_member_permissions: defaultMemberPermissions?.reduce((prev, curr) => prev | curr, 0n).toString(),
        options: children
    };
}
function commandComponent(type, data) {
    return {
        type,
        ...data
    };
}
export function CommandOptions(props) {
    return props;
}
export function SubCommandOption(props) {
    let { children: options, ...obj } = props;
    if (options != null && !Array.isArray(options))
        options = [options];
    return commandComponent(ApplicationCommandOptionType.SUB_COMMAND, { ...obj, options });
}
export function SubCommandGroupOption(props) {
    let { children: options, ...obj } = props;
    if (!Array.isArray(options))
        options = [options];
    return commandComponent(ApplicationCommandOptionType.SUB_COMMAND_GROUP, { ...obj, options });
}
export function StringOption(props) {
    //@ts-expect-error The type does exist
    let { children: choices, ...obj } = props;
    if (choices != null && !Array.isArray(choices))
        choices = [choices];
    return commandComponent(ApplicationCommandOptionType.STRING, { ...obj, choices });
}
export function IntegerOption(props) {
    //@ts-expect-error The type does exist
    let { children: choices, ...obj } = props;
    if (choices != null && !Array.isArray(choices))
        choices = [choices];
    return commandComponent(ApplicationCommandOptionType.INTEGER, { ...obj, choices });
}
export function BooleanOption(props) {
    return commandComponent(ApplicationCommandOptionType.BOOLEAN, props);
}
export function UserOption(props) {
    return commandComponent(ApplicationCommandOptionType.USER, props);
}
export function ChannelOption(props) {
    return commandComponent(ApplicationCommandOptionType.CHANNEL, props);
}
export function RoleOption(props) {
    return commandComponent(ApplicationCommandOptionType.ROLE, props);
}
export function MentionableOption(props) {
    return commandComponent(ApplicationCommandOptionType.MENTIONABLE, props);
}
export function NumberOption(props) {
    //@ts-expect-error The type does exist
    let { children: choices, ...obj } = props;
    if (choices != null && !Array.isArray(choices))
        choices = [choices];
    return commandComponent(ApplicationCommandOptionType.NUMBER, { ...obj, choices });
}
export function AttachmentOption(props) {
    return commandComponent(ApplicationCommandOptionType.ATTACHMENT, props);
}
